package main

import (
	"fmt"
)

/*Go язык с легсической областью видимости (lexically scoped).
Это значит, что переменные, определенные в окружающих блоках видимости
 например глобальные переменные, доступны функции всегда, а не только на время вызова.
 Можно считать, что функция их запоминает.

 Лексическая область видимости и анонимные функции позволяют реализовать замыкания (closure)

*/

func Generate(seed int) func() {

	return func() {
		fmt.Println(seed) //замыкание получает внешнею переменную seed
		seed += 2         //переменная модифицируется
	}
}

func main() {

	iterator := Generate(0)
	iterator()
	iterator()
	iterator()
	iterator()
	iterator()

}
